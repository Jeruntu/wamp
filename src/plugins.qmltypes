import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QFlow.Wamp 1.0'

Module {
    dependencies: []
    Component {
        name: "QAbstractItemModel"
        prototype: "QObject"
        Enum {
            name: "LayoutChangeHint"
            values: {
                "NoLayoutChangeHint": 0,
                "VerticalSortHint": 1,
                "HorizontalSortHint": 2
            }
        }
        Enum {
            name: "CheckIndexOption"
            values: {
                "NoOption": 0,
                "IndexIsValid": 1,
                "DoNotUseParent": 2,
                "ParentIsInvalid": 4
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutChanged" }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutAboutToBeChanged" }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int" }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        name: "QFlow::Authenticator"
        prototype: "QObject"
        exports: ["QFlow.Wamp/Authenticator 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "users"; type: "QFlow::User"; isList: true; isReadonly: true }
    }
    Component {
        name: "QFlow::Authorizer"
        prototype: "QObject"
        exports: ["QFlow.Wamp/Authorizer 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QFlow::DefaultAuthorizer"
        prototype: "QFlow::Authorizer"
        exports: ["QFlow.Wamp/DefaultAuthorizer 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "allowCall"; type: "bool" }
        Property { name: "allowRegister"; type: "bool" }
        Property { name: "allowSubscribe"; type: "bool" }
        Property { name: "allowPublish"; type: "bool" }
        Property { name: "uriPattern"; type: "string" }
    }
    Component {
        name: "QFlow::GSSAPIAuthenticator"
        prototype: "QFlow::Authenticator"
        exports: ["QFlow.Wamp/GSSAPIAuthenticator 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "authMethod"; type: "string" }
    }
    Component {
        name: "QFlow::GSSAPIUser"
        prototype: "QFlow::User"
        exports: ["QFlow.Wamp/GSSAPIUser 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "authMethod"; type: "string" }
    }
    Component {
        name: "QFlow::Realm"
        prototype: "QFlow::WampBase"
        exports: ["QFlow.Wamp/Realm 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string" }
        Property { name: "roles"; type: "QFlow::Role"; isList: true; isReadonly: true }
        Property { name: "authenticators"; type: "QFlow::Authenticator"; isList: true; isReadonly: true }
        Method {
            name: "containsRegistration"
            type: "bool"
            Parameter { name: "uri"; type: "string" }
        }
        Method { name: "registeredUris"; type: "QStringList" }
        Method { name: "registeredInternalUris"; type: "QStringList" }
        Method { name: "registrationIds"; type: "QVariantList" }
        Method {
            name: "childrenKeys"
            type: "QStringList"
            Parameter { name: "uri"; type: "string" }
        }
        Method {
            name: "publish"
            type: "qulonglong"
            Parameter { name: "topic"; type: "string" }
            Parameter { name: "args"; type: "QVariantList" }
        }
        Method {
            name: "subscribersCount"
            type: "int"
            Parameter { name: "topicUri"; type: "string" }
        }
    }
    Component {
        name: "QFlow::Role"
        prototype: "QObject"
        exports: ["QFlow.Wamp/Role 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string" }
        Property { name: "authorizer"; type: "Authorizer"; isPointer: true }
    }
    Component {
        name: "QFlow::SIDUser"
        prototype: "QFlow::User"
        exports: ["QFlow.Wamp/SID 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QFlow::TreeModel"
        prototype: "QAbstractItemModel"
        exports: ["QFlow.Wamp/UriTreeModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "TreeRoles"
            values: {
                "TitleRole": 266,
                "UriRole": 267
            }
        }
        Method {
            name: "setData"
            Parameter { name: "connection"; type: "WampConnection"; isPointer: true }
        }
    }
    Component {
        name: "QFlow::User"
        prototype: "QObject"
        exports: ["QFlow.Wamp/User 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string" }
        Property { name: "role"; type: "Role"; isPointer: true }
    }
    Component {
        name: "QFlow::WampAttached"
        prototype: "QObject"
        Property { name: "isRemote"; type: "bool" }
    }
    Component {
        name: "QFlow::WampBase"
        prototype: "QObject"
        exports: ["QFlow.Wamp/WampBase 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        attachedType: "QFlow::WampAttached"
        Method {
            name: "registerProcedure"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "registerMethod"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "methodName"; type: "string" }
        }
        Method {
            name: "registerProperty"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "propName"; type: "string" }
        }
        Method {
            name: "registerObject"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "registerSignal"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "signalSignature"; type: "string" }
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "registerSignal"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "signalSignature"; type: "string" }
        }
    }
    Component {
        name: "QFlow::WampConnection"
        prototype: "QFlow::WampBase"
        exports: ["QFlow.Wamp/WampConnection 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "QUrl" }
        Property { name: "realm"; type: "string" }
        Property { name: "user"; type: "User"; isPointer: true }
        Signal { name: "connected" }
        Signal { name: "disconnected" }
        Signal {
            name: "error"
            Parameter { name: "error"; type: "WampError" }
        }
        Signal {
            name: "textMessageReceived"
            Parameter { name: "message"; type: "string" }
        }
        Signal {
            name: "subscriptionCreated"
            Parameter { name: "topicUri"; type: "string" }
        }
        Signal {
            name: "subscriptionDeleted"
            Parameter { name: "topicUrl"; type: "string" }
        }
        Method { name: "connect" }
        Method { name: "disconnect" }
        Method {
            name: "subscribe"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "subscribe"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "method"; type: "string" }
        }
        Method {
            name: "unregister"
            Parameter { name: "uri"; type: "string" }
        }
        Method {
            name: "unsubscribe"
            Parameter { name: "uri"; type: "string" }
        }
        Method {
            name: "lookupRegistration"
            type: "Future"
            Parameter { name: "uri"; type: "string" }
        }
        Method { name: "listRegistrations"; type: "Future" }
        Method {
            name: "getSubscription"
            type: "Future"
            Parameter { name: "subscriptionId"; type: "qulonglong" }
        }
        Method {
            name: "subscribersCount"
            type: "Future"
            Parameter { name: "topicUri"; type: "string" }
            Parameter { name: "callback"; type: "ResultCallback" }
        }
        Method {
            name: "subscribersCount"
            type: "Future"
            Parameter { name: "topicUri"; type: "string" }
        }
        Method {
            name: "publish"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "args"; type: "QVariantList" }
        }
        Method {
            name: "call"
            type: "Future"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "args"; type: "QVariantList" }
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "options"; type: "QVariantMap" }
        }
        Method {
            name: "call"
            type: "Future"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "args"; type: "QVariantList" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "call"
            type: "Future"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "args"; type: "QVariantList" }
        }
        Method {
            name: "call"
            type: "Future"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "args"; type: "QVariantList" }
            Parameter { name: "callbackObj"; type: "QObject"; isPointer: true }
            Parameter { name: "callbackMethod"; type: "string" }
            Parameter { name: "options"; type: "QVariantMap" }
        }
        Method {
            name: "call"
            type: "Future"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "args"; type: "QVariantList" }
            Parameter { name: "callbackObj"; type: "QObject"; isPointer: true }
            Parameter { name: "callbackMethod"; type: "string" }
        }
        Method {
            name: "define"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "definition"; type: "string" }
        }
        Method {
            name: "describe"
            type: "Future"
            Parameter { name: "uri"; type: "string" }
        }
    }
    Component {
        name: "QFlow::WampCraAuthenticator"
        prototype: "QFlow::Authenticator"
        exports: ["QFlow.Wamp/WampCraAuthenticator 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QFlow::WampCraUser"
        prototype: "QFlow::User"
        exports: ["QFlow.Wamp/WampCraUser 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "secret"; type: "string" }
    }
    Component {
        name: "QFlow::WampError"
        exports: ["QFlow.Wamp/WampError 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "requestType"; type: "int"; isReadonly: true }
        Property { name: "requestId"; type: "qulonglong"; isReadonly: true }
        Property { name: "details"; type: "QVariantMap"; isReadonly: true }
        Property { name: "uri"; type: "QUrl"; isReadonly: true }
        Property { name: "args"; type: "QVariantList"; isReadonly: true }
        Method { name: "toString"; type: "string" }
    }
    Component {
        name: "QFlow::WampRouter"
        defaultProperty: "realms"
        prototype: "QObject"
        exports: ["QFlow.Wamp/WampRouter 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "host"; type: "string" }
        Property { name: "port"; type: "int" }
        Property { name: "realms"; type: "QFlow::Realm"; isList: true; isReadonly: true }
        Signal {
            name: "newSession"
            Parameter { name: "session"; type: "WampRouterSession"; isPointer: true }
        }
        Signal {
            name: "messageReceived"
            Parameter { name: "session"; type: "WampRouterSession"; isPointer: true }
            Parameter { name: "message"; type: "QVariantList" }
        }
        Signal {
            name: "messageSent"
            Parameter { name: "session"; type: "WampRouterSession"; isPointer: true }
            Parameter { name: "message"; type: "QVariantList" }
        }
        Method { name: "init"; type: "ErrorInfo" }
        Method { name: "deinit"; type: "ErrorInfo" }
    }
    Component {
        name: "QFlow::WampRouterSession"
        prototype: "QThread"
        exports: ["QFlow.Wamp/WampRouterSession 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "authId"; type: "string"; isReadonly: true }
        Property { name: "sessionId"; type: "qulonglong"; isReadonly: true }
        Property { name: "peerAddress"; type: "string"; isReadonly: true }
        Signal { name: "closed" }
        Signal {
            name: "aborted"
            Parameter { name: "uri"; type: "string" }
            Parameter { name: "message"; type: "string" }
        }
        Signal {
            name: "messageSent"
            Parameter { name: "message"; type: "QVariantList" }
        }
        Signal {
            name: "messageReceived"
            Parameter { name: "message"; type: "QVariantList" }
        }
        Signal {
            name: "subscribed"
            Parameter { name: "topic"; type: "string" }
        }
        Signal {
            name: "unsubscribed"
            Parameter { name: "topic"; type: "string" }
        }
        Signal {
            name: "registered"
            Parameter { name: "uri"; type: "string" }
        }
        Signal {
            name: "unregistered"
            Parameter { name: "uri"; type: "string" }
        }
        Signal {
            name: "error"
            Parameter { name: "code"; type: "WampMsgCode" }
            Parameter { name: "uri"; type: "string" }
        }
        Signal { name: "welcomed" }
        Method { name: "peerAddress"; type: "string" }
    }
    Component {
        name: "QThread"
        prototype: "QObject"
        Signal { name: "started" }
        Signal { name: "finished" }
        Method {
            name: "start"
            Parameter { type: "Priority" }
        }
        Method { name: "start" }
        Method { name: "terminate" }
        Method { name: "quit" }
    }
}
